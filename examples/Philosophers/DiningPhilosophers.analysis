JavaPathfinder core system v8.0 (rev 32) - (C) 2005-2014 United States Government. All rights reserved.


====================================================== system under test
DiningPhilosophers.main()

====================================================== search started: 13.10.17 16:57

====================================================== error 1
gov.nasa.jpf.vm.NotDeadlockedProperty
deadlock encountered:
  thread java.lang.Thread:{id:0,name:main,status:WAITING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  thread java.lang.Thread:{id:1,name:Thread-1,status:WAITING,priority:5,isDaemon:false,lockCount:1,suspendCount:0}
  thread java.lang.Thread:{id:2,name:Thread-2,status:WAITING,priority:5,isDaemon:false,lockCount:1,suspendCount:0}
  thread java.lang.Thread:{id:3,name:Thread-3,status:WAITING,priority:5,isDaemon:false,lockCount:1,suspendCount:0}
  thread java.lang.Thread:{id:4,name:Thread-4,status:WAITING,priority:5,isDaemon:false,lockCount:1,suspendCount:0}


====================================================== trace #1
------------------------------------------------------ transition #0 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"ROOT" ,1/1,isCascaded:false}
      [3157 insn w/o sources]
  DiningPhilosophers.java:1      : public class DiningPhilosophers {
      [2 insn w/o sources]
  DiningPhilosophers.java:1      : public class DiningPhilosophers {
      [1 insn w/o sources]
  DiningPhilosophers.java:11     : Fork f1 = new Fork();
      [1 insn w/o sources]
  Fork.java:1                    : public class Fork {
      [2 insn w/o sources]
  Fork.java:1                    : public class Fork {
  DiningPhilosophers.java:11     : Fork f1 = new Fork();
  Fork.java:1                    : public class Fork {
      [1 insn w/o sources]
  Fork.java:3                    : private final Object forkLock = new Object();
      [1 insn w/o sources]
  Fork.java:3                    : private final Object forkLock = new Object();
  Fork.java:4                    : private volatile boolean taken = false;
  DiningPhilosophers.java:11     : Fork f1 = new Fork();
  DiningPhilosophers.java:12     : Fork f2 = new Fork();
  Fork.java:1                    : public class Fork {
      [1 insn w/o sources]
  Fork.java:3                    : private final Object forkLock = new Object();
      [1 insn w/o sources]
  Fork.java:3                    : private final Object forkLock = new Object();
  Fork.java:4                    : private volatile boolean taken = false;
  DiningPhilosophers.java:12     : Fork f2 = new Fork();
  DiningPhilosophers.java:13     : Fork f3 = new Fork();
  Fork.java:1                    : public class Fork {
      [1 insn w/o sources]
  Fork.java:3                    : private final Object forkLock = new Object();
      [1 insn w/o sources]
  Fork.java:3                    : private final Object forkLock = new Object();
  Fork.java:4                    : private volatile boolean taken = false;
  DiningPhilosophers.java:13     : Fork f3 = new Fork();
  DiningPhilosophers.java:14     : Fork f4 = new Fork();
  Fork.java:1                    : public class Fork {
      [1 insn w/o sources]
  Fork.java:3                    : private final Object forkLock = new Object();
      [1 insn w/o sources]
  Fork.java:3                    : private final Object forkLock = new Object();
  Fork.java:4                    : private volatile boolean taken = false;
  DiningPhilosophers.java:14     : Fork f4 = new Fork();
  DiningPhilosophers.java:16     : Philosopher p1 = new Philosopher(f1, f4);
  Philosopher.java:6             : public Philosopher(Fork leftFork, Fork rightFork) {
      [1 insn w/o sources]
  Philosopher.java:7             : this.leftFork = leftFork;
  Philosopher.java:8             : this.rightFork = rightFork;
  Philosopher.java:9             : }
  DiningPhilosophers.java:16     : Philosopher p1 = new Philosopher(f1, f4);
  DiningPhilosophers.java:17     : Philosopher p2 = new Philosopher(f2, f1);
  Philosopher.java:6             : public Philosopher(Fork leftFork, Fork rightFork) {
      [1 insn w/o sources]
  Philosopher.java:7             : this.leftFork = leftFork;
  Philosopher.java:8             : this.rightFork = rightFork;
  Philosopher.java:9             : }
  DiningPhilosophers.java:17     : Philosopher p2 = new Philosopher(f2, f1);
  DiningPhilosophers.java:18     : Philosopher p3 = new Philosopher(f3, f2);
  Philosopher.java:6             : public Philosopher(Fork leftFork, Fork rightFork) {
      [1 insn w/o sources]
  Philosopher.java:7             : this.leftFork = leftFork;
  Philosopher.java:8             : this.rightFork = rightFork;
  Philosopher.java:9             : }
  DiningPhilosophers.java:18     : Philosopher p3 = new Philosopher(f3, f2);
  DiningPhilosophers.java:19     : Philosopher p4 = new Philosopher(f4, f3);
  Philosopher.java:6             : public Philosopher(Fork leftFork, Fork rightFork) {
      [1 insn w/o sources]
  Philosopher.java:7             : this.leftFork = leftFork;
  Philosopher.java:8             : this.rightFork = rightFork;
  Philosopher.java:9             : }
  DiningPhilosophers.java:19     : Philosopher p4 = new Philosopher(f4, f3);
  DiningPhilosophers.java:21     : Thread t1 = new Thread(p1);
      [145 insn w/o sources]
  DiningPhilosophers.java:21     : Thread t1 = new Thread(p1);
  DiningPhilosophers.java:22     : Thread t2 = new Thread(p2);
      [145 insn w/o sources]
  DiningPhilosophers.java:22     : Thread t2 = new Thread(p2);
  DiningPhilosophers.java:23     : Thread t3 = new Thread(p3);
      [145 insn w/o sources]
  DiningPhilosophers.java:23     : Thread t3 = new Thread(p3);
  DiningPhilosophers.java:24     : Thread t4 = new Thread(p4);
      [145 insn w/o sources]
  DiningPhilosophers.java:24     : Thread t4 = new Thread(p4);
  DiningPhilosophers.java:26     : t1.start();
      [1 insn w/o sources]
------------------------------------------------------ transition #1 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"START" ,1/2,isCascaded:false}
      [2 insn w/o sources]
  DiningPhilosophers.java:27     : t2.start();
      [1 insn w/o sources]
------------------------------------------------------ transition #2 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"START" ,1/3,isCascaded:false}
      [2 insn w/o sources]
  DiningPhilosophers.java:28     : t3.start();
      [1 insn w/o sources]
------------------------------------------------------ transition #3 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"START" ,1/4,isCascaded:false}
      [2 insn w/o sources]
  DiningPhilosophers.java:29     : t4.start();
      [1 insn w/o sources]
------------------------------------------------------ transition #4 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"START" ,1/5,isCascaded:false}
      [2 insn w/o sources]
  DiningPhilosophers.java:32     : t1.join();
      [1 insn w/o sources]
------------------------------------------------------ transition #5 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"JOIN" ,1/4,isCascaded:false}
      [1 insn w/o sources]
  Philosopher.java:1             : public class Philosopher implements Runnable {
  Philosopher.java:12            : eat();
  Philosopher.java:16            : leftFork.take();
  Fork.java:8                    : synchronized (forkLock) {
------------------------------------------------------ transition #6 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/4,isCascaded:false}
  Fork.java:8                    : synchronized (forkLock) {
  Fork.java:9                    : while (taken) {
------------------------------------------------------ transition #7 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/4,isCascaded:false}
  Fork.java:9                    : while (taken) {
  Fork.java:13                   : assert !taken;
------------------------------------------------------ transition #8 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/4,isCascaded:false}
  Fork.java:13                   : assert !taken;
  Fork.java:14                   : taken = true;
------------------------------------------------------ transition #9 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/4,isCascaded:false}
  Fork.java:14                   : taken = true;
  Fork.java:15                   : }
  Fork.java:18                   : }
  Fork.java:19                   : }
  Philosopher.java:17            : rightFork.take();
  Fork.java:8                    : synchronized (forkLock) {
------------------------------------------------------ transition #10 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,2/4,isCascaded:false}
      [1 insn w/o sources]
  Philosopher.java:1             : public class Philosopher implements Runnable {
  Philosopher.java:12            : eat();
  Philosopher.java:16            : leftFork.take();
  Fork.java:8                    : synchronized (forkLock) {
------------------------------------------------------ transition #11 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,2/4,isCascaded:false}
  Fork.java:8                    : synchronized (forkLock) {
  Fork.java:9                    : while (taken) {
------------------------------------------------------ transition #12 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/4,isCascaded:false}
  Fork.java:9                    : while (taken) {
  Fork.java:13                   : assert !taken;
------------------------------------------------------ transition #13 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/4,isCascaded:false}
  Fork.java:13                   : assert !taken;
  Fork.java:14                   : taken = true;
------------------------------------------------------ transition #14 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/4,isCascaded:false}
  Fork.java:14                   : taken = true;
  Fork.java:15                   : }
  Fork.java:18                   : }
  Fork.java:19                   : }
  Philosopher.java:17            : rightFork.take();
  Fork.java:8                    : synchronized (forkLock) {
------------------------------------------------------ transition #15 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,2/4,isCascaded:false}
  Fork.java:8                    : synchronized (forkLock) {
  Fork.java:9                    : while (taken) {
------------------------------------------------------ transition #16 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/4,isCascaded:false}
  Fork.java:9                    : while (taken) {
  Fork.java:10                   : forkLock.wait();
      [1 insn w/o sources]
------------------------------------------------------ transition #17 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"WAIT" ,2/3,isCascaded:false}
      [1 insn w/o sources]
  Philosopher.java:1             : public class Philosopher implements Runnable {
  Philosopher.java:12            : eat();
  Philosopher.java:16            : leftFork.take();
  Fork.java:8                    : synchronized (forkLock) {
------------------------------------------------------ transition #18 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,2/3,isCascaded:false}
  Fork.java:8                    : synchronized (forkLock) {
  Fork.java:9                    : while (taken) {
------------------------------------------------------ transition #19 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  Fork.java:9                    : while (taken) {
  Fork.java:13                   : assert !taken;
------------------------------------------------------ transition #20 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  Fork.java:13                   : assert !taken;
  Fork.java:14                   : taken = true;
------------------------------------------------------ transition #21 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  Fork.java:14                   : taken = true;
  Fork.java:15                   : }
  Fork.java:18                   : }
  Fork.java:19                   : }
  Philosopher.java:17            : rightFork.take();
  Fork.java:8                    : synchronized (forkLock) {
------------------------------------------------------ transition #22 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,2/3,isCascaded:false}
  Fork.java:8                    : synchronized (forkLock) {
  Fork.java:9                    : while (taken) {
------------------------------------------------------ transition #23 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/3,isCascaded:false}
  Fork.java:9                    : while (taken) {
  Fork.java:10                   : forkLock.wait();
      [1 insn w/o sources]
------------------------------------------------------ transition #24 thread: 4
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"WAIT" ,2/2,isCascaded:false}
      [1 insn w/o sources]
  Philosopher.java:1             : public class Philosopher implements Runnable {
  Philosopher.java:12            : eat();
  Philosopher.java:16            : leftFork.take();
  Fork.java:8                    : synchronized (forkLock) {
------------------------------------------------------ transition #25 thread: 4
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,2/2,isCascaded:false}
  Fork.java:8                    : synchronized (forkLock) {
  Fork.java:9                    : while (taken) {
  Fork.java:13                   : assert !taken;
  Fork.java:14                   : taken = true;
  Fork.java:15                   : }
------------------------------------------------------ transition #26 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"RELEASE" ,1/2,isCascaded:false}
  Fork.java:8                    : synchronized (forkLock) {
  Fork.java:9                    : while (taken) {
------------------------------------------------------ transition #27 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  Fork.java:9                    : while (taken) {
  Fork.java:10                   : forkLock.wait();
      [1 insn w/o sources]
------------------------------------------------------ transition #28 thread: 4
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"WAIT" ,1/1,isCascaded:false}
  Fork.java:15                   : }
  Fork.java:18                   : }
  Fork.java:19                   : }
  Philosopher.java:17            : rightFork.take();
  Fork.java:8                    : synchronized (forkLock) {
  Fork.java:9                    : while (taken) {
  Fork.java:10                   : forkLock.wait();
      [1 insn w/o sources]

====================================================== output #1
no output

====================================================== results
error #1: gov.nasa.jpf.vm.NotDeadlockedProperty "deadlock encountered:    thread java.lang.Thread:{..."

====================================================== statistics
elapsed time:       00:00:10
states:             new=26221,visited=58605,backtracked=84797,end=5
search:             maxDepth=74,constraints=0
choice generators:  thread=26220 (signal=1756,lock=8372,sharedRef=13457,threadApi=306,reschedule=2329), data=0
heap:               new=400,released=162,maxLive=386,gcCycles=84826
instructions:       609123
max memory:         207MB
loaded code:        classes=64,methods=1482

====================================================== search finished: 13.10.17 16:57
